#### STAT 405/705 FALL 2018 ASSIGNMENT 5 (Monte Carlo)
#### NAME:

#### If in a question I refer to a function that we have not seen in class, 
#### then use the help facility to find out about it.
#### Insert your answers under each question.
#### Submit your solutions to Canvas as a plain text file.


# The town of Longsvale is a target of opportunity for a driverless car, ride hailing service.
# It is an interesting town because it is laid out in a perfect city grid and has exactly 
# 18 blocks in both the north and east directions. Roads going north-south are called Avenues,
# and roads east-west are called streets.
# The driverless car will only pick up and drop people off at street intersections.
# This means that every car and every passenger's location can be represented as a pair (i,j),
# i for the street they are on, and j for the avenue, where both i and j take integer values between 1 and 18.
# The city planners used the convention that the intersection at the south west corner of the grid is (1,1)
# and the intersection in the north east corner is (18,18).

# The city also operates its time on a very discrete level, only working in minute increments.
# A car can move one block in one minute.

#Q1. (4pts.) Write a function to return the distance in city blocks between a car and a waiting passenger.
# The function should take two inputs, the car's location and the waiting passenger's location.
# Paste your function below and print its output when called on the pair car.location  = (3,7) and pass.location = (6,3).

#Q2. (8 pts.) Write a function that creates a new car. A "new car" is just a list. This list has named elements as follows:
# CID: a unique identifier for the car.
# Status: a text string that is either "Waiting", "En route to passenger" or "En route to destination".
# Location: the coordinates of the car's current location.
# Destination: the coordinates of where the car is headed.
# PID: the id of the passenger that the car is either headed toward, or is currently carrying. 
# Your function will need to take 5 arguments, one for each component of the list. 
# Even though the arguments will typically take on their default values, by incorporating these arguments
# you give the user the opportunity of overwriting the default values.

# By default, have Status set to "Waiting", Location set to a random intersection and set Destination = NULL
# and PID = NULL. Think of NULL as a placeholder for something that is currently empty/not set.
# Don't put quotes around the NULL. Like NA, it is special value in the R language.
# A lazy way of creating a very likely unique CID would be paste(sample(c(LETTERS,0:9),10),sep="",collapse="" ).

# Paste your function below and show what happens when you call it with all default arguments, that is when you
# run the command "newcar()".

# By way of illustration, here's what my version of the function, called "newcar", outputs when called with all default values:
# > newcar()
# $CID
# [1] "7IJMO9XVLK"
# 
# $Status
# [1] "Waiting"
# 
# $Location
# [1]  2 13
# 
# $Destination
# NULL
# 
# $PID
# NULL

#Q3. (7 pts.) Write a function that creates a new passenger and call this function "newpass". A passenger is again a list, but with these named elements:
# PID: a unique identifier for the passenger.
# WaitTime: an integer that records how long the passenger has been waiting in minutes.
# Location: the coordinates of the passenger's current location.
# Destination: the coordinates of where the passenger is headed.

# By default, have WaitTime set to 0, Location set to a random intersection and Destination set to a random intersection.
# You can create the PID with the same paste(sample(c(LETTERS,0:9),10),sep="",collapse="" ) code.

# Paste your function below and show what happens when you call it with all default arguments, that is when you
# run the command "newpass()".

#Q4 (5 pts.) 
###### Set the random seed to your birthday number and include this in your answer.
# Create two lists, one of 12 passengers and the other of 12 cars.
# Show the code you use to create the passenger and car lists but you don't have to print the lists out. 

#Q5 (5 pts.) Create a distance matrix that contains how far each car is initially from each passenger 
# (use your Q1 function to do this).
# Print out and paste the distance matrix below. 
 
#Q6 (4 pts.) Focusing now just on passenger 1, identify which car is closest to them and how long the
# passenger needs to wait in order to be picked up by this closest car.
# Show the code that you used to do this and paste both the car ID and the passenger waiting time below.

##################################################################################
# More generally you need to assign cars to all passengers. In Operations Research this is called the "Assignment Problem".
# There is a package for R called "lpSolve" which solves the assignment problem.
# Install the lpSolve package.
# If your distance matrix is called dist.mat, you assign cars to passengers in an optimal fashion with the command
# fm <- lp.assign(dist.mat)
# Now fm$solution gives you a matrix that shows which car was assigned to each passenger.

#Q7 (10 pts.) Run a Monte Carlo simulation with 10000 replications that estimates  
# the average waiting time that passengers experience under this optimal allocation.
# It's useful to realize that waiting time will just be equal to the initial distance 
# between the car and the waiting passenger, because of the assumption that a car can drive one block in one minute.
# For each iteration generate a new set of 12 passengers and a new set of 12 cars.
# Show your simulation code together with the average waiting time.

#Q8 (7 pts.) Redo the Monte Carlo simulation in Q7 to estimate the probability that at least one 
# of the 12 passengers arrives at his or her destination before the last of the 12 
# passengers is first picked up. Occasionally  you will create a passenger whose origin and destination are the same.
# Treat this as a passenger error with the app used for ordering the car -- that is, they will still wait to be picked up
# and their journey time will be zero.




