
#### STAT 405/705 FALL 2018 ASSIGNMENT 1
#### NAME: Jerrison Li Liu

#### If in a question I refer to a function that we have not seen in class, 
#### then use the help facility in R to find out about it.
#### Insert your answers and the R code you used to generate it, beneath each question.
#### Even though for some questions you could find the answer "by inspection", for this  homework you need
#### to write code to get the answers.

#### **** I M P O R T A N T ****
#### Submit your solutions to Canvas as a plain text file with  a ".txt" file extention.


# My birthday is September 2nd, 1994 (I wish).
# Using the convention MMDDYYYY, then my birthday number is
# 09021994

#### Q1. 

#a Store your birthday number into a variable called "bday"
bday <- 06011990

# Now find and print
#b The fourth root of your birthday number
# Answer: 49.51703
print(bday^(1/4))

#c The log base 10 of your birthday number
# Answer: 6.779018
print(log(bday, base = 10))

#d The modulus of your birthday number, base 27
# Answer: 8
print(bday %% 27)

#e The sum of the first 10 cube numbers: 1,8,27,..., 1000 
# Answer: 3025
print(sum(seq(from = 1, to = 10, by = 1)^3))

#### Q2. 

#  Create the two vectors of numbers alpha = (1000,970,940, ...,520)
#                                    beta  = (50,60,70, ..., 210)  

#a What is the sum of the element-wise product of the two vectors?
# Answer: 1557200
alpha <- seq(from = 1000, to = 520, by = -30)
beta <- seq(from = 50, to = 210, by = 10)
print(sum(alpha * beta))

#b What is the maximum value in the vector containing the element-wise products?
# Answer: 110200
print(max(alpha * beta))

#c What is/are the indices (position in the vector) of the maximum value found in part b?
# Answer: 15
print(which.max(x = (alpha * beta)))

#d How many of the elements of the element-wise product vector are strictly less than 75000?
# Answer: 4
print(sum((alpha * beta) < 75000))

#### Q3.
#a  Set the random number seed as your birthday number
set.seed(bday)

#b Create two vectors of exponential random variables, each of length 100000.
#  Create the first vector with the rate parameter equal to 2, and the second vector
#  with the rate parameter equal to 1. 
vec1 <- rexp(n = 100000, rate = 2)
vec2 <- rexp(n = 100000, rate = 1)

#c Create a third vector containing the element-wise proportion of the first 
# variable to the sum of the two variables.  
vec3 <- vec1/(vec1 + vec2)

#d Extract and store from the first vector, only those values for which
#  the element-wise proportion is strictly greater than 0.5.  
vec4 <- vec1[vec3 > 0.5]

#e Print the mean of these specific elements of the first vector. 
# Answer: 0.8337172
print(mean(vec4))

#### Q4. 
#a  Enter the following 5 x 5 matrix into R
####     (0 0 0 0 1 
####      0 0 0 1 1
####      0 0 1 2 1
####      0 1 3 3 1
####      1 4 6 4 1)
####     Label  the rows as A, B, C, D and E and the columns as Alpha, Beta, Gamma, Delta and Epsilon.
# Looks each row is an increasing power of 11
matrix1 <- matrix(data = c(rep(x = 0, times = 4), 1, rep(x = 0, times = 3), 
                           1, 4, 0, 0, 1, 3, 6, c(0: 4), rep(x = 1, times = 5)),
                 nrow = 5,
                 ncol = 5,
                 )

rownames(matrix1) <- c("A", "B", "C", "D", "E")
colnames(matrix1) <- c("Alpha", "Beta", "Gamma", "Delta", "Epsilon")

#b  Print the matrix in R and paste the printed output below
# Answer
#   Alpha Beta Gamma Delta Epsilon
# A     0    0     0     0       1
# B     0    0     0     1       1
# C     0    0     1     2       1
# D     0    1     3     3       1
# E     1    4     6     4       1
print(matrix1)

#c  Extract and print the submatrix corresponding to the second and fourth rows,
#   and the fifth column. Make sure that what you extract is indeed a matrix.
# Answer:
#   Epsilon
# B       1
# D       1
print(matrix1[c(2, 4), 5, drop = FALSE])

#d  Find and print the inverse of the matrix used in part a.  
# Answer
#          A  B  C  D E
# Alpha    1 -4  6 -4 1
# Beta    -1  3 -3  1 0
# Gamma    1 -2  1  0 0
# Delta   -1  1  0  0 0
# Epsilon  1  0  0  0 0
print(solve(matrix1))

#### Q5. The Wharton MBA program used to  have a grading scheme that went:
#### DS (Distinguished), HP (High Pass), P (Pass), F (Fail)
#### A professor collected anticipated grades in a course from 75 students.
#### The data was recorded numerically, 1 = DS, 2 = HP, 3 = P, 4 = F)
#### Here's the raw data.

# 2, 1, 2, 3, 1, 3, 2, 2, 2, 1, 3, 1, 3, 3, 2, 
# 1, 2, 1, 2, 3, 3, 2, 1, 2, 2, 3, 3, 2, 3, 1, 
# 1, 2, 4, 1, 3, 3, 2, 1, 2, 2, 1, 1, 3, 2, 2, 
# 1, 2, 2, 3, 2, 2, 1, 2, 3, 3, 2, 3, 3, 1, 2, 
# 3, 3, 3, 1, 1, 2, 4, 1, 2, 1, 2, 2, 3, 2, 2 

#a  Create and store an ordered factor variable from the raw data with the letter grades as labels.
#   Fail should be the lowest value and DS the highest value. 
grades <- factor(x = c(2, 1, 2, 3, 1, 3, 2, 2, 2, 1, 3, 1, 3, 3, 2, 
                       1, 2, 1, 2, 3, 3, 2, 1, 2, 2, 3, 3, 2, 3, 1, 
                       1, 2, 4, 1, 3, 3, 2, 1, 2, 2, 1, 1, 3, 2, 2, 
                       1, 2, 2, 3, 2, 2, 1, 2, 3, 3, 2, 3, 3, 1, 2, 
                       3, 3, 3, 1, 1, 2, 4, 1, 2, 1, 2, 2, 3, 2, 2),
                 levels = c(4, 3, 2, 1),
                 labels = c("F", "P", "HP", "DS"),
                 ordered = TRUE)
                 
#b  Summarize the data with the "table" command and paste the output below.
# Answer:
# grades
#  F  P HP DS 
#  2 22 31 20 
print(table(grades))

#c   Which grade was most often reported?
# Answer: HP
which.max(table(grades))

#aside: you can use the table as input to the "pie" function which makes a pie chart.
pie(table(grades))

#### Q6. Here are two vectors:
x <- c(0.00, 0.25, 0.50, 0.75, 1.00, 1.25,
       1.50, 1.75, 2.00, 2.25, 2.50, 2.75, 
       3.00, 3.25, 3.50, 3.75, 4.00, 4.25, 
       4.50, 4.75, 5.00, 5.25, 5.50, 5.75, 
       6.00, 6.25)


y <- c(0.00, 0.25, 0.48, 0.68, 0.84, 0.95, 
       1.00, 0.98, 0.91, 0.78, 0.60, 0.38,
       0.14, -0.11, -0.35, -0.57, -0.76, -0.89,
       -0.98, -1.00, -0.96, -0.86, -0.71, -0.51,
       -0.28, -0.03)

# Just looking at the numbers, what is the relationship between x and y?
# No points for this one, because it is rather hard.

#a By visualizing the data using the "plot" function, what is the relationship between x and y?
# Answer: Y is a sine function on X with amplitude 1 and period 2pi.
plot(x, y)


#### Q7. 

#a What is a key difference between the list extraction operators [ and $?
# Answer: The list extraction operator [ allows you to extract using indices 
# and names. The list extraction $ operator allows you to extract using names
# only.

#b Reset the random number seed to your birthday seed.
set.seed(bday)

# Paste the following code into R

my.list <- list(G = c(rnorm(10)), H = matrix(rnorm(100),ncol=10), 
                GAMMA = list(ALPHA = matrix(rnorm(81),ncol=9), 
                             BETA = matrix(rnorm(81),ncol=9)))

#c Write code to extract and print the value of the (3,7) element in the H 
# matrix.
# Answer: 1.273985
print(my.list$H[3,7])
 
#d Write code to extract and find the sum of all of the elements in the 
#  matrix product (%*%) of the two matrices ALPHA and BETA.
# Answer = -28.92058
print(sum(my.list$GAMMA$ALPHA %*% my.list$GAMMA$BETA))

#e Rename the element called "G", as "Y", and paste both the command you used 
#  and the output from the names() command to prove that you did it 
# successfully. 
# Answer: "Y"     "H"     "GAMMA"
names(my.list)[1] <- "Y"
print(names(my.list))

#### Q8. 

#a Set the random number seed to your birthday number again.
set.seed(bday)

#b Create a 1000 x 225 matrix of standard normals (mean = 0, sd = 1).
matrix2 <- matrix(data = c(rnorm(n = 1000*225, mean = 0, sd = 1)),
                  nrow = 1000,
                  ncol = 225,
                  byrow = TRUE
                  )

#c Using the apply function, find the mean of each row of the matrix
row_means = apply(X = matrix2, MARGIN = 1, FUN = mean)

#d Find and report the standard deviation (R command "sd") of these 1000 row means
# Answer: 0.0664032
print(sd(x = row_means))

